<?php

/**
 * @package    osFreeLands
 * @copyright Copyright (C) 2013 Wene - ssm2017 Binder ( S.Massiaux ). All rights reserved.
 * @license   GNU/GPL, http://www.gnu.org/licenses/gpl-2.0.html
 * osFreeLands is free software. This version may have been modified pursuant
 * to the GNU General Public License, and as distributed it includes or
 * is derivative of works licensed under the GNU General Public License or
 * other free or open source software licenses.
 */

/**
 * Implements hook_requirements().
 */
function osfreelands_requirements($phase) {
  $requirements = array();
  $t = get_t();
   if ($phase == 'install') {
		 $valid = FALSE;
		 // check if d4os_ui_users is installed
		 if (module_exists('d4os_ui_users')) {
			 $valid = TRUE;
		 }
		 // check if metaverse_user is installed
		 if (module_exists('metaverse_user')) {
			 $valid = TRUE;
		 }
    if (!$valid) {
      $requirements['osfreelands'] = array(
        'title' => $t('OsFreelands'),
        'description' => $t('You need to enable either the d4os_ui_module or metaverse_user module to be able to enable the osfreelands module.'),
        'severity' => REQUIREMENT_ERROR,
				'weight' => -1000,
      );
    }
  }
  return $requirements;
}

/**
 * Implements hook_install().
 */
function osfreelands_install() {
	$node_types = _osfreelands_get_node_types();

	foreach ($node_types as $machine_name => $texts) {
		// define the node type
		$defaults = array(
			'type' => $machine_name,
			'name' => $texts['name'],
			'base' => 'node_content',
			'title_label' => $texts['title_label'],
			'description' => $texts['description'],
			'custom' => TRUE,
		);

		// set other node defaults not declared above
		$content_type = node_type_set_defaults($defaults);

		// add the body field
		node_add_body_field($content_type, $texts['body_label']);

		// save the content type
		node_type_save($content_type);

		// add peristant variables that control settings
		variable_set('additional_settings__active_tab_' . $machine_name, 'edit-menu');
		variable_set('node_preview_' . $machine_name, 1);
		variable_set('node_options_' . $machine_name, array(0 => 'status'));
		variable_set('node_submitted_' . $machine_name, 0);
		variable_set('menu_options_' . $machine_name, array());
		variable_set('menu_parent_' . $machine_name, 'main-menu:0');

		// create all the fields we are adding to our content type
		foreach (_osfreelands_installed_fields($machine_name) as $field) {
			field_create_field($field);
		}

		// create all the instances for our fields
		foreach (_osfreelands_installed_instances($machine_name) as $instance) {
			$instance['entity_type'] = 'node';
			$instance['bundle'] = $defaults['type'];
			field_create_instance($instance);
		}
	}
}

/**
 * Define the node types values
 */
function _osfreelands_get_node_types() {
	$t = get_t();
	return array(
		'freelands_terminal' => array(
			'name' => $t('FreeLand Terminal'),
			'title_label' => $t('Name'),
			'body_label' => $t('Description'),
			'description' => $t('Inworld managed terminal. These nodes are automatically generated by the inworld script.')
		),
		'freelands_parcel' => array(
			'name' => $t('FreeLand Parcel'),
			'title_label' => $t('Name'),
			'body_label' => $t('Description'),
			'description' => $t('Parcels availables. These nodes are automatically generated by the inworld script.')
		),
	);
}

/**
 * Define the fields for our content type.
 */
function _osfreelands_installed_fields($node_type) {
	switch ($node_type) {
		case 'freelands_terminal':
			return array(
				// terminal_key
				'osfl_terminal_key' => array(
					'field_name' => 'field_osfl_terminal_key',
					'type' => 'text',
					'module' => 'text',
					'active' => 1,
					'locked' => 1,
					'cardinality' => 1,
					'deleted' => 0,
					'settings' => array(
						'max_length' => 40
					)
				),
				// terminal_url
				'osfl_terminal_url' => array(
					'field_name' => 'field_osfl_terminal_url',
					'type' => 'text',
					'module' => 'text',
					'active' => 1,
					'locked' => 1,
					'cardinality' => 1,
					'deleted' => 0,
					'settings' => array(
						'max_length' => 255
					)
				),
				// owner_key
				'osfl_terminal_owner_key' => array(
					'field_name' => 'field_osfl_terminal_owner_key',
					'type' => 'text',
					'module' => 'text',
					'active' => 1,
					'locked' => 1,
					'cardinality' => 1,
					'deleted' => 0,
					'settings' => array(
						'max_length' => 40
					)
				),
				// region_name
				'osfl_region_name' => array(
					'field_name' => 'field_osfl_region_name',
					'type' => 'text',
					'module' => 'text',
					'active' => 1,
					'locked' => 1,
					'cardinality' => 1,
					'deleted' => 0,
					'settings' => array(
						'max_length' => 255
					)
				),
				// terminal_location
				'osfl_terminal_location' => array(
					'field_name' => 'field_osfl_terminal_location',
					'type' => 'text',
					'module' => 'text',
					'active' => 1,
					'locked' => 1,
					'cardinality' => 1,
					'deleted' => 0,
					'settings' => array(
						'max_length' => 13
					)
				),
			);
			break;
		case 'freelands_parcel':
			return array(
				// parcel_key
				'osfl_parcel_key' => array(
					'field_name' => 'field_osfl_parcel_key',
					'type' => 'text',
					'module' => 'text',
					'active' => 1,
					'locked' => 1,
					'cardinality' => 1,
					'deleted' => 0,
					'settings' => array(
						'max_length' => 40
					)
				),
				// terminal
				'osfl_terminal_nid' => array(
					'field_name' => 'field_osfl_terminal_nid',
					'type' => 'entityreference',
					'module' => 'entityreference',
					'active' => 1,
					'locked' => 1,
					'cardinality' => 1,
					'deleted' => 0,
					'settings' => array(
						'target_type' => 'node',
						'handler' => 'base',
						'handler_settings' => array(
							'target_bundles' => array(
								'freelands_terminal' => 'freelands_terminal'
							),
							'sort' => array(
								'type' => 'none'
							),
							'behaviors' => array(
								'views-select-list' => array(
									'status' => 0
								)
							)
						)
					),
				),
				// status
				'osfl_parcel_status' => array(
					'field_name' => 'field_osfl_parcel_status',
					'type' => 'list_integer',
					'module' => 'list',
					'active' => 1,
					'locked' => 1,
					'cardinality' => 1,
					'deleted' => 0,
					'settings' => array(
						'allowed_values' => array(
							0 => 'Available',
							1 => 'Reserved',
							2 => 'Unavailable'
						),
					),
				),
				// owner_key
				'osfl_parcel_owner_key' => array(
					'field_name' => 'field_osfl_parcel_owner_key',
					'type' => 'text',
					'module' => 'text',
					'active' => 1,
					'locked' => 1,
					'cardinality' => 1,
					'deleted' => 0,
					'settings' => array(
						'max_length' => 40
					)
				),
				// parcel_location
				'osfl_parcel_location' => array(
					'field_name' => 'field_osfl_parcel_location',
					'type' => 'text',
					'module' => 'text',
					'active' => 1,
					'locked' => 1,
					'cardinality' => 1,
					'deleted' => 0,
					'settings' => array(
						'max_length' => 13
					)
				),
				// parcel_size
				'osfl_parcel_size' => array(
					'field_name' => 'field_osfl_parcel_size',
					'type' => 'text',
					'module' => 'text',
					'active' => 1,
					'locked' => 1,
					'cardinality' => 1,
					'deleted' => 0,
					'settings' => array(
						'max_length' => 5
					)
				),
				// end_time
				'osfl_end_time' => array(
					'field_name'  => 'field_osfl_end_time',
					'type'        => 'datestamp',
					'module'      => 'date',
					'active'      => 1,
					'locked'      => 1,
					'cardinality' => 1,
					'deleted'     => 0,
					'settings'    => array(
						'granularity'   => Array(
							'month'   => 'month',
							'day'     => 'day',
							'hour'    => 'hour',
							'minute'  => 'minute',
							'year'    => 'year',
							'second'  => 0,
						),
						'tz_handling'   => 'site',
						'timezone_db'   => 'UTC',
						'cache_enabled' => 0,
						'cache_count'   => 4,
						'todate'        => '',
					),
				),
			);
			break;
	}
}

/**
 * Define the field instances for our content type.
 */
function _osfreelands_installed_instances($node_type) {
	switch ($node_type) {
		case 'freelands_terminal':
			return array(
				// terminal key
				'osfl_terminal_key' => array(
					'field_name' => 'field_osfl_terminal_key',
					'label' => t('Terminal key'),
					'required' => TRUE,
					'widget' => array(
						'type' => 'text_textfield',
						'module' => 'text',
						'settings' => array(
							'size' => 40
						)
					)
				),
				// terminal url
				'osfl_terminal_url' => array(
					'field_name' => 'field_osfl_terminal_url',
					'label' => t('Terminal url'),
					'required' => TRUE,
					'widget' => array(
						'type' => 'text_textfield',
						'module' => 'text',
					),
					'display' => array(
						'default' => array(
							'type'   => 'hidden'
						),
						'teaser' => array(
							'type'   => 'hidden'
						),
					),
				),
				// owner key
				'osfl_terminal_owner_key' => array(
					'field_name' => 'field_osfl_terminal_owner_key',
					'label' => t('Owner key'),
					'required' => TRUE,
					'widget' => array(
						'type' => 'text_textfield',
						'module' => 'text',
						'settings' => array(
							'size' => 40
						)
					)
				),
				// region name
				'osfl_region_name' => array(
					'field_name' => 'field_osfl_region_name',
					'label' => t('Region name'),
					'required' => TRUE,
					'widget' => array(
						'type' => 'text_textfield',
						'module' => 'text',
					)
				),
				// terminal location
				'osfl_terminal_location' => array(
					'field_name' => 'field_osfl_terminal_location',
					'label' => t('Terminal location'),
					'required' => TRUE,
					'widget' => array(
						'type' => 'text_textfield',
						'module' => 'text',
						'settings' => array(
							'size' => 13,
							'max_length' => 13
						)
					)
				),
			);
			break;
		case 'freelands_parcel':
			return array(
				// parcel key
				'osfl_parcel_key' => array(
					'field_name' => 'field_osfl_parcel_key',
					'label' => t('Owner key'),
					'required' => TRUE,
					'widget' => array(
						'type' => 'text_textfield',
						'module' => 'text',
						'settings' => array(
							'size' => 40
						)
					)
				),
				// terminal nid
				'osfl_terminal_nid' => array(
					'field_name' => 'field_osfl_terminal_nid',
					'label' => t('Terminal'),
					'required' => 1,
					'widget' => array(
						'type' => 'entityreference_autocomplete',
						'module' => 'entityreference',
						'settings' => array(
							'match_operator' => 'CONTAINS',
							'size' => 60,
							'path' => ''
						)
					),
					'display' => array(
						'default' => array(
							'label' => 'inline',
							'type' => 'entityreference_label',
							'module' => 'entityreference',
							'settings' => array(
								'link' => TRUE
							)
						)
					)
				),
				// status
				'osfl_parcel_status' => array(
					'field_name' => 'field_osfl_parcel_status',
					'label' => t('Status'),
					'widget' => array(
						'type' => 'options_select',
						'module' => 'options',
					),
					'display' => array(
						'default' => array(
							'label' => 'inline',
							'type' => 'list_default',
							'module' => 'list',
						),
					),
				),
				// owner key
				'osfl_parcel_owner_key' => array(
					'field_name' => 'field_osfl_parcel_owner_key',
					'label' => t('Owner key'),
					'required' => TRUE,
					'widget' => array(
						'type' => 'text_textfield',
						'module' => 'text',
						'settings' => array(
							'size' => 40
						)
					)
				),
				// parcel location
				'osfl_parcel_location' => array(
					'field_name' => 'field_osfl_parcel_location',
					'label' => t('Parcel location'),
					'required' => TRUE,
					'widget' => array(
						'type' => 'text_textfield',
						'module' => 'text',
						'settings' => array(
							'size' => 13,
							'max_length' => 13
						)
					)
				),
				// parcel size
				'osfl_parcel_size' => array(
					'field_name' => 'field_osfl_parcel_size',
					'label' => t('Parcel size'),
					'required' => TRUE,
					'widget' => array(
						'type' => 'text_textfield',
						'module' => 'text',
						'settings' => array(
							'size' => 5,
							'max_length' => 5
						)
					)
				),
				// end_time
				'osfl_end_time' => array(
					'field_name'  => 'field_osfl_end_time',
					'label'       => t('End time'),
					'required'    => FALSE,
					'widget' => array(
						'type'     => 'date_select',
						'module'   => 'date',
						'settings' => array(
							'input_format'  => 'm/d/Y - H:i:s',
							'year_range'    => '0:+3',
							'increment'     => 15,
						),
					),
					'settings' => array(
						'default_value'   => 'now',
						'default_value2'  => 'same',
					),
					'display' => array(
						'default' => array(
							'label'   => 'inline',
							'type'    => 'date_default',
							'module'  => 'date',
						),
					),
				),
			);
			break;
	}
}

/**
 * Implements hook_uninstall().
 */
function osfreelands_uninstall() {
	$node_types = _osfreelands_get_node_types();

	foreach ($node_types as $machine_name => $texts) {
		// gather all nodes created
		$sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
		$result = db_query($sql, array(':type' => $machine_name));
		$nids = array();
		foreach ($result as $row) {
			$nids[] = $row->nid;
		}

		// delete all the nodes at once
		node_delete_multiple($nids);

		// remove peristant variables that control settings
		variable_del('additional_settings__active_tab_' . $machine_name);
		variable_del('node_preview_' . $machine_name);
		variable_del('node_options_' . $machine_name);
		variable_del('node_submitted_' . $machine_name);
		variable_del('menu_options_' . $machine_name);
		variable_del('menu_parent_' . $machine_name);


		// find all fields and delete them
		foreach (array_keys(_osfreelands_installed_fields($machine_name)) as $field) {
			field_delete_field($field);
		}

		// find all fields and delete instance
		$instances = field_info_instances('node', $machine_name);
		foreach ($instances as $instance_name => $instance) {
			field_delete_instance($instance);
		}

		// delete our content type
		node_type_delete($machine_name);
	}

	// purge all field information
	field_purge_batch(1000);

	// Remove variables.
	db_query("DELETE FROM {variable} WHERE name LIKE 'osfreelands%%'");
}
