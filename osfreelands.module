<?php

/**
 * @package    osFreeLands
 * @copyright Copyright (C) 2013 Wene - ssm2017 Binder ( S.Massiaux ). All rights reserved.
 * @license   GNU/GPL, http://www.gnu.org/licenses/gpl-2.0.html
 * osFreeLands is free software. This version may have been modified pursuant
 * to the GNU General Public License, and as distributed it includes or
 * is derivative of works licensed under the GNU General Public License or
 * other free or open source software licenses.
 */

/**
 * Implements hook_menu().
 */
function osfreelands_menu() {
	$items = array();
	$items['admin/config/metaverse-framework/osfreelands'] = array(
		'title' => 'osFreeLands',
		'description' => 'Settings for the osfreelands module.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('osfreelands_settings'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['osfreelands/terminals/update/%/%'] = array(
		'title' => 'Update terminal',
		'type' => MENU_CALLBACK,
		'page callback' => 'osfreelands_update_terminal',
		'page arguments' => array(3, 4),
		'access callback' => TRUE,
		'file' => 'osfreelands_terminals.inc'
	);
	return $items;
}

/**
 * Admin settings
 */
function osfreelands_settings() {
	$form = array();
	$form['osfreelands_password_fieldset'] = array(
		'#type' => 'fieldset',
		'#title' => t('Password'),
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
	);
	$form['osfreelands_password_fieldset']['osfreelands_password'] = array(
		'#type' => 'textfield',
		'#title' => t('Password.'),
		'#default_value' => variable_get('osfreelands_password', '0000'),
		'#description' => t("Enter the password to communicate with the boxes."),
	);
	$form['osfreelands_parcels_fieldset'] = array(
		'#type' => 'fieldset',
		'#title' => t('Parcels'),
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
	);
	$form['osfreelands_parcels_fieldset']['osfreelands_max_parcels_per_user'] = array(
		'#type' => 'textfield',
		'#title' => t('Max parcels per user.'),
		'#size' => 4,
		'#maxlength' => 4,
		'#default_value' => variable_get('osfreelands_max_parcels_per_user', 1),
		'#description' => t("Maximum quantity of parcels a single user can own."),
	);
	$form['osfreelands_parcels_fieldset']['osfreelands_renting_duration'] = array(
		'#type' => 'textfield',
		'#title' => t('Renting duration.'),
		'#size' => 3,
		'#maxlength' => 3,
		'#default_value' => variable_get('osfreelands_renting_duration', 0),
		'#description' => t("Renting duration in days (0 means infinite)."),
	);
	return system_settings_form($form);
}

/**
 * Implements hook_node_view.
 */
function osfreelands_node_view($node, $build_mode = 'full') {
	if ($node->type == 'freelands_terminal' && $build_mode == 'full') {
		$url = $node->field_osfl_terminal_url[$node->language][0]['value'];
		// ping terminal
		$response = osfreelands_http_request($url . 'ping');
		if ($response->success && $response->code == 200) {
			$status = 'status';
			$message = t('Terminal is online');
		}
		else {
			$status = 'error';
			$message = t('The terminal is not answering : !error', array('!error' => $response->data . ' (' . $response->code . ')'));
		}
		$node->content['osfreelands_status'] = array(
			'#markup' => '<div class="messages ' . $status . '">' . $message . '</div>'
		);
		// upate link
		if (($GLOBALS['user']->uid == $node->uid) || $GLOBALS['user']->uid == 1) {
			$node->content['osfreelands_updater'] = array(
				'#type' => 'link',
				'#title' => t('Update terminal'),
				'#href' => 'osfreelands/terminals/update/' . $node->nid . '/' . base64_encode($url),
			);
		}
	}
}

/**
 * metaverse frameworkd dispatcher
 */
function osfreelands_dispatch($params) {
	$cmd = $params['cmd'];
	$sl = &$params['sl'];
	$args = $params['args'];
	switch ($cmd) {
		case 'save_terminal':
			module_load_include('inc', 'osfreelands', 'osfreelands_terminals');
			osfreelands_inworld_save_terminal($sl, $args);
			break;
		default:
			$sl->response['status'] = FALSE;
			$sl->response['message'] = "Oops! Unknown command: $cmd.";
			break;
	}
}

/********************
 *		HELPERS
 ********************/

function osfreelands_get_messages() {
	$output = "";
	$messages = drupal_get_messages();
	foreach ($messages as $type) {
		if (count($type)) {
			foreach ($type as $message) {
				$output .= $message . "\n";
			}
		}
	}
	return $output;
}

function osfreelands_check_uuid($uuid) {
	if (preg_match("/^[0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12}$/", $uuid)) {
		return TRUE;
	}
	return FALSE;
}

function osfreelands_http_request($url, $settings = array()) {
	$response = new stdclass();
	$response->data = '';
	if (!function_exists('curl_init')) {
		$response->success = FALSE;
		$response->code = -1;
		$response->message = 'Curl is not installed';
	}
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	curl_setopt($ch, CURLOPT_TIMEOUT, 5);
	$data = curl_exec($ch);
	if (!$data) {
		$response->success = FALSE;
		$response->code = curl_errno($ch);
		$response->message = curl_error($ch);
	}
	$response->success = TRUE;
	$response->code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
	$response->message = '';
	$response->data = $data;
	curl_close($ch);
	return $response;
}
