<?php

/**
 * @package    osFreeLands
 * @copyright Copyright (C) 2013 Wene - ssm2017 Binder ( S.Massiaux ). All rights reserved.
 * @license   GNU/GPL, http://www.gnu.org/licenses/gpl-2.0.html
 * osFreeLands is free software. This version may have been modified pursuant
 * to the GNU General Public License, and as distributed it includes or
 * is derivative of works licensed under the GNU General Public License or
 * other free or open source software licenses.
 */

/**
 * Implements hook_menu().
 */
function osfreelands_menu() {
	$items = array();
	$items['admin/config/metaverse-framework/osfreelands'] = array(
		'title' => 'osFreeLands',
		'description' => 'Settings for the osfreelands module.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('osfreelands_settings'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
	);
	$items['freelands/terminals/update/%'] = array(
		'title' => 'Update terminal',
		'type' => MENU_CALLBACK,
		'page callback' => 'osfreelands_update_terminal',
		'page arguments' => array(3),
		'access callback' => TRUE,
		'file' => 'osfreelands_terminals.inc'
	);
	$items['freelands/parcels/rent/%/%'] = array(
    'title' => 'parcel rent callback',
    'type' => MENU_CALLBACK,
    'page callback' => 'osfreelands_rent_parcel_callback',
    'page arguments' => array(3,4),
    'access callback' => TRUE,
		'file' => 'osfreelands_parcels.inc'
  );
	return $items;
}

/**
 * Admin settings
 */
function osfreelands_settings() {
	// get roles
  $roles = array(
    '0' => t('None'),
  );
  $roles += user_roles(TRUE);

	$form = array();
	// roles
	$form['osfreelands_roles_fieldset'] = array(
		'#type' => 'fieldset',
		'#title' => t('Roles'),
		'#collapsible' => FALSE,
		'#collapsed' => FALSE,
	);
  $form['osfreelands_roles_fieldset']['osfreelands_terminal_role'] = array(
    '#type' => 'select',
    '#title' => t('Terminal owners'),
    '#default_value' => variable_get('osfreelands_terminal_role', 0),
    '#options' => $roles,
    '#description' => t('This role is automatically assigned to terminal owners.'),
  );
	$form['osfreelands_roles_fieldset']['osfreelands_parcel_role'] = array(
    '#type' => 'select',
    '#title' => t('Parcel owners'),
    '#default_value' => variable_get('osfreelands_parcel_role', 0),
    '#options' => $roles,
    '#description' => t('This role is automatically assigned to parcel owners.'),
  );
	return system_settings_form($form);
}

/**
 * Implements hook_permission.
 */
function osfreelands_permission() {
  return array(
    'osfl manage terminals' => array(
      'title' => t('Manage terminals'),
      'description' => t('Allow the user to see and update any terminal.'),
    ),
  );
}

/**
 * Implements hook_views_api.
 */
function osfreelands_views_api() {
  return array(
    'api' => 3
  );
}

/**
 * Implements hook_cron.
 */
function osfreelands_cron() {
	module_load_include('inc', 'osfreelands', 'osfreelands_terminals');
	module_load_include('inc', 'osfreelands', 'osfreelands_parcels');
	// get expired parcels
	$query = new EntityFieldQuery();
	$entities = $query->entityCondition('entity_type', 'node')
			->propertyCondition('type', 'freelands_parcel')
			->fieldCondition('field_osfl_end_time', 'value', time(), '<=')
			->execute();
	if (isset($entities['node'])) {
		foreach ($entities['node'] as $node) {
			// get the parcel
			$parcel = node_load($node->nid);
			$old_owner_uid = $parcel->field_osfl_parcel_owner[$parcel->language][0]['target_id'];
			// get the terminal
			$terminal = osfreelands_ping_terminal($parcel->field_osfl_term_nid[$parcel->language][0]['target_id']);
			if ($terminal->online_status != 'online') {
				watchdog('freelands', 'Terminal !name is not responding.', array('!name' => $terminal->title), WATCHDOG_ERROR, $link = l($terminal->title, 'node/'.$terminal->nid));
				continue;
			}
			$default_owner_uid = $terminal->field_osfl_term_default_owner[$terminal->language][0]['target_id'];
			// get the url
			$url = $terminal->field_osfl_term_url[$terminal->language][0]['value'];
			// tell it inworld
			$response = metaverse_framework_http_request($url . '?q=reset-parcel&parcel='.urlencode($parcel->field_osfl_parcel_location[$parcel->language][0]['value']));
			if ($response->success && $response->code == 200) {
				$parcel->field_osfl_parcel_status[$parcel->language][0]['value'] = 0;
				$parcel->field_osfl_end_time[$parcel->language][0]['value'] = NULL;
				$parcel->field_osfl_parcel_owner[$parcel->language][0]['target_id'] = $default_owner_uid;
				node_save($parcel);
				watchdog('freelands', 'Parcel !name expired.', array('!name' => $parcel->title), WATCHDOG_NOTICE, $link = l($parcel->title, 'node/'.$parcel->nid));
				// get parcels owned by this user
				$owned_parcels = osfreelands_get_parcels_by_owner_uid(array('owner_uid' => $old_owner_uid));
				// remove the parcel role if no more parcels owned
				if (is_null($owned_parcels)) {
					osfreelands_remove_role($old_owner_uid, 'parcel');
				}
			}
			else {
				watchdog('freelands', 'Error changing parcel inworld details.', array(), WATCHDOG_ERROR, $link = l($parcel->title, 'node/'.$parcel->nid));
			}
		}
	}
}

/**
 * Implements hook_node_validate.
 */
function osfreelands_node_validate($node, $form, &$form_state) {
	// check if the terminal is responding
	if ($node->type == 'freelands_terminal' || $node->type == 'freelands_parcel') {
		module_load_include('inc', 'osfreelands', 'osfreelands_terminals');
	}
	// check values
	switch($node->type) {
		case 'freelands_terminal':
			// check if the terminal is responding
			$response = osfreelands_ping_terminal_by_url($form_state['values']['field_osfl_term_url']);
			if ($response->online_status != 'online') {
				form_set_error('field_osfl_term_url', $response->message);
			}
			// check if the owner is registered inworld
			$owner_uuid = osfreelands_get_uuid_by_uid($form_state['values']['field_osfl_term_owner'][$node->language][0]['target_id']);
			if (!$owner_uuid) {
				form_set_error('field_osfl_term_owner', t('The owner is not registered inworld.'));
			}
			// check if the default owner is registered inworld
			$default_owner_uuid = osfreelands_get_uuid_by_uid($form_state['values']['field_osfl_term_default_owner'][$node->language][0]['target_id']);
			if (!$default_owner_uuid) {
				form_set_error('field_osfl_term_default_owner', t('The default owner is not registered inworld.'));
			}
			break;
		case 'freelands_parcel':
			// get the terminal
			$terminal = node_load($form_state['values']['field_osfl_term_nid'][$node->language][0]['target_id']);
			// check if the terminal is responding
			$response = osfreelands_ping_terminal_by_url($terminal->field_osfl_term_url[$terminal->language][0]['value']);
			if ($response->online_status != 'online') {
				form_set_error('field_osfl_term_nid', $response->message);
			}
			// check if the owner is registered inworld
			$owner_uuid = osfreelands_get_uuid_by_uid($form_state['values']['field_osfl_parcel_owner'][$node->language][0]['target_id']);
			if (!$owner_uuid) {
				form_set_error('field_osfl_parcel_owner', t('The owner is not registered inworld.'));
			}
			break;
	}
}

/**
 * Implements hook_node_submit.
 */
function osfreelands_node_submit($node, $form, &$form_state) {
	switch($node->type) {
		case 'freelands_terminal':
			// assign role to owner
			osfreelands_set_role($form_state['values']['field_osfl_term_owner'][$node->language][0]['target_id'], 'terminal');
			break;
		case 'freelands_parcel':
			// assign role to owner
			osfreelands_set_role($form_state['values']['field_osfl_parcel_owner'][$node->language][0]['target_id'], 'parcel');
			// get the terminal
			$terminal = node_load($form_state['values']['field_osfl_term_nid'][$node->language][0]['target_id']);
			// set values inworld
			$values = array(
				'terminal_url' => $terminal->field_osfl_term_url[$terminal->language][0]['value'],
				'terminal_password' => $terminal->field_osfl_term_pass[$terminal->language][0]['value'],
				'parcel_location' => $form_state['values']['field_osfl_parcel_location'][$node->language][0]['value'],
				'owner_uuid' => osfreelands_get_uuid_by_uid($form_state['values']['field_osfl_parcel_owner'][$node->language][0]['target_id'])
			);
			module_load_include('inc', 'osfreelands', 'osfreelands_parcels');
			osfreelands_update_parcel_inworld($values);
			break;
	}
}

/**
 * Implements hook_node_view.
 */
function osfreelands_node_view($node, $build_mode = 'full') {
	if ($build_mode == 'full') {
		switch ($node->type) {
			case 'freelands_terminal':
				module_load_include('inc', 'osfreelands', 'osfreelands_terminals');
				osfreelands_display_update_terminal_button($node);
				break;
			case 'freelands_parcel':
				module_load_include('inc', 'osfreelands', 'osfreelands_parcels');
				osfreelands_display_rent_parcel_button($node);
				osfreelands_display_parcel_region_name($node);
				break;
		}
	}
}

/**
 * Implements hook_node_delete.
 */
function osfreelands_node_delete($node) {
	switch ($node->type) {
		case 'freelands_terminal':
			module_load_include('inc', 'osfreelands', 'osfreelands_terminals');
			module_load_include('inc', 'osfreelands', 'osfreelands_parcels');
			// delete parcels
			$parcels_nids = osfreelands_get_parcels_by_terminal_nid(array('terminal_nid' => $node->nid));
			if (!is_null($parcels_nids)) {
				node_delete_multiple($parcels_nids);
			}
			// check if the owner owns other terminals
			$owner_uid = $node->field_osfl_term_owner[$node->language][0]['target_id'];
			$terminals = osfreelands_get_terminals_by_owner_uid(array('owner_uid' => $owner_uid));
			if (is_null($terminals)) {
				osfreelands_remove_role($owner_uid, 'terminal');
			}
			break;
		case 'freelands_parcel':
			module_load_include('inc', 'osfreelands', 'osfreelands_parcels');
			// check if the owner owns other parcels
			$owner_uid = $node->field_osfl_parcel_owner[$node->language][0]['target_id'];
			$parcels = osfreelands_get_parcels_by_owner_uid(array('owner_uid' => $owner_uid));
			if (is_null($parcels)) {
				osfreelands_remove_role($owner_uid, 'parcel');
			}
			break;
	}
}

/**
 * metaverse frameworkd dispatcher
 */
function osfreelands_dispatch($params) {
	$cmd = $params['cmd'];
	$sl = &$params['sl'];
	$args = $params['args'];
	switch ($cmd) {
		case 'save_terminal':
			module_load_include('inc', 'osfreelands', 'osfreelands_terminals');
			osfreelands_inworld_save_terminal($sl, $args);
			break;
		default:
			$sl->response['status'] = FALSE;
			$sl->response['message'] = "Oops! Unknown command: $cmd.";
			break;
	}
}

function osfreelands_set_role($uid, $type) {
  if (!is_numeric($uid)) {
		return;
	}

	switch ($type) {
		case 'terminal':
			$rid = variable_get('osfreelands_terminal_role', 0);
			break;
		case 'parcel':
			$rid = variable_get('osfreelands_parcel_role', 0);
			break;
		default:
			return;
	}

  if ($rid == 0) {
		return;
	}

  // remove assigned roles
  db_query("DELETE FROM {users_roles} WHERE rid=:rid AND uid=:uid", array(':rid' => $rid, ':uid' => $uid));

  // assign the role
  db_query("INSERT INTO {users_roles} (rid, uid) VALUES (:rid, :uid)", array(':rid' => $rid, ':uid' => $uid));
}

function osfreelands_remove_role($uid, $type) {
	if (!is_numeric($uid)) {
		return;
	}

	switch ($type) {
		case 'terminal':
			$rid = variable_get('osfreelands_terminal_role', 0);
			break;
		case 'parcel':
			$rid = variable_get('osfreelands_parcel_role', 0);
			break;
		default:
			return;
	}

  if ($rid == 0) {
		return;
	}

	// remove assigned roles
  db_query("DELETE FROM {users_roles} WHERE rid=:rid AND uid=:uid", array(':rid' => $rid, ':uid' => $uid));
}

function osfreelands_get_uuid_by_uid($uid) {
	$uuid = FALSE;
	if (module_exists('d4os_ui_users')) {
		// get the uid of the terminal owner
		$uuid = db_query("SELECT UUID FROM {d4os_ui_users} WHERE uid = :uid", array(':uid' => $uid))->fetchField();
	}
	else if (module_exists('metaverse_user')) {
		$user = user_load($uid);
		$uuid = isset($user->field_mu_user_uuid[LANGUAGE_NONE][0]['uuid_field']) ? $user->field_mu_user_uuid[LANGUAGE_NONE][0]['uuid_field'] : FALSE;
	}
	return $uuid;
}

function osfreelands_get_uid_by_uuid($uuid) {
	$uid = FALSE;
	if (module_exists('d4os_ui_users')) {
		// get the uid of the terminal owner
		$uid = db_query("SELECT uid FROM {d4os_ui_users} WHERE UUID = :uuid", array(':uuid' => $uuid))->fetchField();
	}
	else if (module_exists('metaverse_user')) {
		$query = new EntityFieldQuery();
		$entities = $query->entityCondition('entity_type', 'user')
				->fieldCondition('field_mu_user_uuid', 'uuid_field', $uuid)
				->execute();
		if (isset($entities['user'])) {
			reset($entities['user']);
			$uid = key($entities['user']);
		}
	}
	return $uid;
}